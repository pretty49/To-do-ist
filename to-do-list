<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title> To-Do List App</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">

    <style>
        :root {
            --bg-color: #fdfcfa;
            --surface-color: #ffffff;
            --primary-color: #6a0dad; /* A richer purple */
            --secondary-color: #ff7e5f; /* A warm coral accent */
            --text-color: #2c2c3e;
            --secondary-text-color: #888;
            --delete-color: #ff4d4d;
            --shadow-color: rgba(106, 13, 173, 0.15);
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Poppins', sans-serif;
            color: var(--text-color);
            /* --- NEW FABULOUS BACKGROUND --- */
            background-color: var(--bg-color);
            background-image: 
                radial-gradient(at 15% 15%, hsla(271, 80%, 92%, 1) 0px, transparent 50%),
                radial-gradient(at 85% 90%, hsla(14, 100%, 88%, 1) 0px, transparent 50%);
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            padding: 2rem;
        }

        .app-container {
            width: 100%;
            max-width: 550px;
            background-color: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(255,255,255,0.5);
        }

        h1 {
            text-align: center;
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 2rem;
            color: var(--primary-color);
        }

        .add-task-form { display: flex; gap: 0.5rem; margin-bottom: 1.5rem; }
        #task-input {
            flex-grow: 1; padding: 0.8rem 1rem; font-size: 1rem;
            border: 2px solid #e0e0e0; border-radius: 10px;
            background: rgba(255,255,255,0.5);
            transition: all 0.3s;
        }
        #task-input:focus {
            outline: none; border-color: var(--primary-color);
            box-shadow: 0 0 10px var(--shadow-color);
        }
        #add-task-btn {
            background-color: var(--primary-color); color: white; border: none;
            padding: 0 1.5rem; font-size: 1rem; font-weight: 500;
            border-radius: 10px; cursor: pointer; transition: background-color 0.3s;
        }
        #add-task-btn:hover { background-color: #5a0b92; }

        /* --- NEW: FILTER BUTTONS --- */
        .filter-controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
        }
        .filter-btn {
            background: none; border: 2px solid #ddd;
            padding: 5px 15px; border-radius: 50px;
            cursor: pointer; font-weight: 500;
            transition: all 0.3s;
        }
        .filter-btn.active {
            background-color: var(--secondary-color);
            color: white;
            border-color: var(--secondary-color);
        }

        #task-list { list-style: none; }
        .task-item {
            display: flex; align-items: center; gap: 1rem;
            padding: 1rem; background-color: #fff;
            border-radius: 10px; margin-bottom: 0.8rem;
            box-shadow: 0 4px 10px rgba(0,0,0,0.03);
            transition: all 0.3s;
        }
        .task-item.completed { opacity: 0.6; }
        .task-item.completed .task-text { text-decoration: line-through; }
        .task-checkbox { width: 20px; height: 20px; flex-shrink: 0; accent-color: var(--primary-color); }
        .task-text { flex-grow: 1; font-size: 1rem; cursor: pointer; }
        .delete-btn { background: none; border: none; color: var(--secondary-text-color); font-size: 1.2rem; cursor: pointer; transition: color 0.3s; }
        .delete-btn:hover { color: var(--delete-color); }
        .empty-state { text-align: center; padding: 2rem; color: var(--secondary-text-color); }
    </style>
</head>
<body>

    <div class="app-container">
        <h1>Haleem To-Do List</h1>
        <form class="add-task-form" id="add-task-form">
            <input type="text" id="task-input" placeholder="What needs to be done?" autocomplete="off">
            <button type="submit" id="add-task-btn">Add Task</button>
        </form>

        <!-- NEW: Filter controls -->
        <div class="filter-controls">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
        </div>

        <ul id="task-list"></ul>
        <div id="empty-state" class="empty-state" style="display: none;"><p>You have no tasks. Enjoy your day!</p></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const taskForm = document.getElementById('add-task-form');
            const taskInput = document.getElementById('task-input');
            const taskList = document.getElementById('task-list');
            const emptyState = document.getElementById('empty-state');
            const filterBtns = document.querySelectorAll('.filter-btn');

            let tasks = JSON.parse(localStorage.getItem('tasks')) || [];
            let currentFilter = 'all'; // NEW: Track the current filter

            const saveTasks = () => {
                localStorage.setItem('tasks', JSON.stringify(tasks));
            };

            const renderTasks = () => {
                taskList.innerHTML = '';
                
                // NEW: Filter the tasks before rendering
                const filteredTasks = tasks.filter(task => {
                    if (currentFilter === 'active') return !task.completed;
                    if (currentFilter === 'completed') return task.completed;
                    return true; // 'all'
                });

                if (filteredTasks.length === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                    filteredTasks.forEach(task => {
                        const li = document.createElement('li');
                        li.className = 'task-item';
                        // Use task.id to link elements together
                        li.dataset.id = task.id; 
                        if (task.completed) {
                            li.classList.add('completed');
                        }

                        li.innerHTML = `
                            <input type="checkbox" class="task-checkbox" data-id="${task.id}" ${task.completed ? 'checked' : ''}>
                            <span class="task-text">${task.text}</span>
                            <button class="delete-btn" data-id="${task.id}">Ã—</button>
                        `;
                        taskList.appendChild(li);
                    });
                }
            };

            taskForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const taskText = taskInput.value.trim();
                if (taskText !== '') {
                    const newTask = {
                        // Use timestamp for a unique ID
                        id: Date.now(), 
                        text: taskText,
                        completed: false
                    };
                    tasks.push(newTask);
                    saveTasks();
                    renderTasks();
                    taskInput.value = '';
                    taskInput.focus();
                }
            });

            taskList.addEventListener('click', (e) => {
                const target = e.target;
                const taskId = parseInt(target.dataset.id);

                if (target.classList.contains('task-checkbox')) {
                    const task = tasks.find(t => t.id === taskId);
                    task.completed = target.checked;
                    saveTasks();
                    renderTasks();
                }

                if (target.classList.contains('delete-btn')) {
                    if (confirm('Are you sure you want to delete this task?')) {
                        tasks = tasks.filter(t => t.id !== taskId);
                        saveTasks();
                        renderTasks();
                    }
                }

                // NEW: Edit-in-place logic
                if (target.classList.contains('task-text')) {
                    target.contentEditable = true;
                    target.focus();
                    target.onblur = () => { // When user clicks away
                        target.contentEditable = false;
                        const task = tasks.find(t => t.id === taskId);
                        task.text = target.textContent;
                        saveTasks();
                    };
                    target.onkeydown = (event) => { // When user presses a key
                        if (event.key === 'Enter') {
                            event.preventDefault(); // Prevent new line
                            target.blur(); // Trigger the onblur event to save
                        }
                    };
                }
            });

            // NEW: Event listener for filter buttons
            filterBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    filterBtns.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentFilter = btn.dataset.filter;
                    renderTasks();
                });
            });

            renderTasks();
        });
    </script>

</body>
</html>
